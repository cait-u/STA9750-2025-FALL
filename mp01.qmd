---
title: "STA 9750 — Mini-Project 01"
author: "Caitlin Uang"
date: "`r Sys.Date()`"
format:
  html:
    code-fold: true
    code-summary: "Show code"
    embed-resources: true
editor: visual
execute:
  warning: false
  message: false
  echo: true
---
## Data Acquisition
```{r}
if(!dir.exists(file.path("data", "mp01"))){
    dir.create(file.path("data", "mp01"), showWarnings=FALSE, recursive=TRUE)
}

GLOBAL_TOP_10_FILENAME <- file.path("data", "mp01", "global_top10_alltime.csv")

if(!file.exists(GLOBAL_TOP_10_FILENAME)){
    download.file("https://www.netflix.com/tudum/top10/data/all-weeks-global.tsv", 
                  destfile=GLOBAL_TOP_10_FILENAME)
}

COUNTRY_TOP_10_FILENAME <- file.path("data", "mp01", "country_top10_alltime.csv")

if(!file.exists(COUNTRY_TOP_10_FILENAME)){
    download.file("https://www.netflix.com/tudum/top10/data/all-weeks-countries.tsv", 
                  destfile=COUNTRY_TOP_10_FILENAME)
}
```
## Data Import and Preparation
```{r}
if(!require("tidyverse")) install.packages("tidyverse")
library(readr)
library(dplyr)

GLOBAL_TOP_10 <- read_tsv(GLOBAL_TOP_10_FILENAME)
```

```{r}
str(GLOBAL_TOP_10)
```

```{r}
glimpse(GLOBAL_TOP_10)
```

```{r}
GLOBAL_TOP_10 <- GLOBAL_TOP_10 |>
    mutate(season_title = if_else(season_title == "N/A", NA, season_title))

glimpse(GLOBAL_TOP_10)
```

```{r}
COUNTRY_TOP_10 <- read_tsv(COUNTRY_TOP_10_FILENAME)

COUNTRY_TOP_10 <- COUNTRY_TOP_10 |>
    mutate(season_title = if_else(season_title == "N/A", NA, season_title))

glimpse(COUNTRY_TOP_10)

```
## Initial Data Exploration
```{r}
library(DT)
GLOBAL_TOP_10 |> 
    head(n=20) |>
    datatable(options=list(searching=FALSE, info=FALSE))
```

```{r}
library(stringr)
format_titles <- function(df){
    colnames(df) <- str_replace_all(colnames(df), "_", " ") |> str_to_title()
    df
}

GLOBAL_TOP_10 |> 
    format_titles() |>
    head(n=20) |>
    datatable(options=list(searching=FALSE, info=FALSE)) |>
    formatRound(c('Weekly Hours Viewed', 'Weekly Views'))
```

```{r}
GLOBAL_TOP_10 |> 
    mutate(`runtime_(minutes)` = round(60 * runtime)) |>
    select(-season_title, 
           -runtime) |>
    format_titles() |>
    head(n=20) |>
    datatable(options=list(searching=FALSE, info=FALSE)) |>
    formatRound(c('Weekly Hours Viewed', 'Weekly Views'))
```
## Exploratory Questions

#### **1. How many different countries does Netflix operate in?**
```{r}
#Question 1
library(dplyr)
countries_count <- COUNTRY_TOP_10 |>
  distinct(country_name) |>
  nrow()
```
Netflix operates in **`r countries_count`** countries.

#### **2. Which non-English-language film has spent the most cumulative weeks in the global top 10? How many weeks did it spend?**
```{r}
#Question 2
non_english <- GLOBAL_TOP_10 |>
  mutate(Language = str_extract(category, "\\((.*)\\)"),
         Language = str_replace_all(Language, "[()]", "")) |>
  filter(str_detect(category, "Film"), Language != "English") |>
  group_by(show_title) |>
  summarise(total_weeks = sum(cumulative_weeks_in_top_10, na.rm = TRUE)) |>
  arrange(desc(total_weeks)) |>
  slice(1)
```
The non-English-language film that spent the longest time in the global top 10 is **`r non_english$show_title`** at **`r non_english$total_weeks` weeks**.

#### **3. What is the longest film (English or non-English) to have ever appeared in the Netflix global Top 10? How long is it in minutes?**
```{r}
#Question 3
longest_film <- GLOBAL_TOP_10 |>
  filter(str_detect(category, "Film")) |>
  arrange(desc(runtime)) |>
  slice(1)
```
The longest film to have ever appeared in the global top 10 is **`r longest_film$show_title`** at **`r longest_film$runtime` minutes**.

#### **4. For each of the four categories, what program has the most total hours of global viewership?**
```{r}
#Question 4
library(scales)
total_hours <- GLOBAL_TOP_10 |>
  group_by(category, show_title) |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE), .groups = "drop") |>
  group_by(category) |>
  slice_max(total_hours, n = 1) |>
  ungroup() |>
  format_titles() |>
  mutate(`Total Hours` = comma(`Total Hours`))

total_hours |>
  DT::datatable(
    options = list(
      pageLength = 10,
      searching = TRUE,
      info = TRUE
    )
  )
```
#### **5. Which TV show had the longest run in a country’s Top 10? How long was this run and in what country did it occur?**
```{r}
#Question 5
longest_run_country <- COUNTRY_TOP_10 |>
  filter(str_detect(category, "TV")) |>
  group_by(show_title, country_name) |>
  summarise(total_weeks = sum(cumulative_weeks_in_top_10, na.rm = TRUE), .groups = "drop") |>
  arrange(desc(total_weeks)) |>
  slice(1)
```
The longest running TV show is **`r longest_run_country$show_title`** in **`r longest_run_country$country_name`** for **`r longest_run_country$total_weeks` weeks**.

#### **6. Netflix provides over 200 weeks of service history for all but one country in our data set. Which country is this and when did Netflix cease operations in that country?**
```{r}
#Question 6
country_history <- COUNTRY_TOP_10 |>
  group_by(country_name) |>
  summarise(
    total_weeks = n_distinct(week),
    last_week = max(as.Date(week), na.rm = TRUE)) |>
  filter(total_weeks < 200)
```
**`r country_history$country_name`** is the country with fewer that 200 weeks of history and Netlfix ceased operations on the week of **`r country_history$last_week`**.

#### **7. What is the total viewership of the TV show Squid Game? Note that there are three seasons total and we are looking for the total number of hours watched across all seasons.**
```{r}
#Question 7
squid_game <- GLOBAL_TOP_10 |>
  filter(str_detect(show_title, "Squid Game")) |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE))

squid_game_hours <- format(squid_game$total_hours, big.mark = ",", scientific = FALSE)

```
The total viewership for Squid Game is **`r squid_game_hours`**.

#### **8. The movie Red Notice has a runtime of 1 hour and 58 minutes. Approximately how many views did it receive in 2021?**
```{r}
#Question 8
library(lubridate)

red_notice <- GLOBAL_TOP_10 |>
  filter(str_detect(show_title, "Red Notice"), year(week) == 2021) |>
  mutate(approx_views = weekly_hours_viewed / (1+58/60)) |>
  summarise(total_views = sum(approx_views, na.rm = TRUE))

red_notice_total <- formatC(red_notice$total_views, format = "f", big.mark = ",", digits = 0)
```
Red Notice received **`r red_notice_total`** views in 2021.

#### **9. How many Films reached Number 1 in the US but did not originally debut there? That is, find films that first appeared on the Top 10 chart at, e.g., Number 4 but then became more popular and eventually hit Number 1? What is the most recent film to pull this off?**
```{r}
#Question 9
us_films <- COUNTRY_TOP_10 |>
  filter(country_name == "United States", category == "Films") |>  
  arrange(show_title, week)  

us_films_rank <- us_films |>
  group_by(show_title) |>
  summarise(
    first_week = min(week, na.rm = TRUE),
    first_rank = weekly_rank[which.min(week[!is.na(week)])], 
    ever_hit_no1 = any(weekly_rank == 1, na.rm = TRUE),
    first_week_no1 = if (any(weekly_rank == 1, na.rm = TRUE)) min(week[weekly_rank == 1],  na.rm = TRUE) else as.Date(NA)
  ) |>
  ungroup()

film_climbed_no1 <- us_films_rank |>
  filter(first_rank > 1, ever_hit_no1) |> 
  arrange(desc(first_week_no1))

num_no1_film <- nrow(film_climbed_no1)

most_recent <- film_climbed_no1 |>
  slice_max(first_week_no1, n = 1)
```
There are **`r num_no1_film` films** that reached Number 1 but didn't originally debut in the US. The most recent film to pull this off is **`r most_recent$show_title`** on the week of **`r most_recent$first_week_no1`**.

#### **10. Which TV show/season hit the top 10 in the most countries in its debut week? In how many countries did it chart?**
```{r}
tv_shows <- COUNTRY_TOP_10 |>
  filter(category == "TV") |>
  arrange(show_title, season_title, week)

tv_first_week <- tv_shows |>
  group_by(show_title, season_title) |>
  summarise(first_week = min(week, na.rm = TRUE), .groups = "drop")

tv_first_week_countries <- tv_shows |>
  inner_join(tv_first_week, by = c("show_title", "season_title")) |>
  filter(week == first_week) |>
  group_by(show_title, season_title, first_week) |>
  summarise(
    num_countries = n_distinct(country_name),
    .groups = "drop"
  ) |>
  arrange(desc(num_countries))

top_tv_debut <- tv_first_week_countries |>
  slice_max(num_countries, n = 1)
```
**`r top_tv_debut$show_title`** was the TV show that charted Top 10 in **`r top_tv_debut$num_countries` countries** during its debut week.


## *Stranger Things 5*: Netflix Ushers In One Last Journey Into the Upside Down
**New York, NY — October 3, 2025**
```{r}
st_total_hours <- GLOBAL_TOP_10 |>
  filter(show_title == "Stranger Things") |>
  summarise(
    total_hours = sum(weekly_hours_viewed, na.rm = TRUE)) |>
    pull(total_hours)

st_total_hours <- format(st_total_hours, big.mark = ",", scientific = FALSE)

st_total_countries <- COUNTRY_TOP_10 |>
  filter(show_title == "Stranger Things") |>
  summarise(
    total_countries = n_distinct(country_name))

st_total_weeks <- GLOBAL_TOP_10 |>
  filter(show_title == "Stranger Things") |>
  summarise(total_weeks = sum(cumulative_weeks_in_top_10, na.rm = TRUE))

```
Netflix announced the return of its global phenomenon *Stranger Things* with its fifth and final season, inviting audiences one last time into the Upside Down. Since its debut, the series has garnered over **`r st_total_hours` total viewing hours**, captivating viewers worldwide. This global phenomenon has appeared in the **Top 10 in over `r st_total_countries` countries** and has been in **Netflix's Global Top 10 for over `r st_total_weeks` total weeks**. With its multinational appeal, Stranger Things is one of Netflix's most popular hits alongside other shows like Wednesday and Adolescence.
```{r}
library(ggplot2)
library(stringr)

english_tv_stats <- GLOBAL_TOP_10 |>
  filter(category == "TV") |>
  group_by(show_title) |>
  summarise(
    total_hours = sum(weekly_hours_viewed, na.rm = TRUE),
    total_weeks = sum(cumulative_weeks_in_top_10, na.rm = TRUE),
    .groups = "drop"
  ) |>
  arrange(desc(total_hours))

top10_tv <- english_tv_stats |> slice_max(total_hours, n = 10)


top10_tv$show_title <- factor(top10_tv$show_title, levels = top10_tv$show_title[order(-top10_tv$total_hours)])

ggplot(top10_tv, aes(x = show_title, y = total_hours, fill = ifelse(show_title == "Stranger Things", "Stranger Things", "Other"))) +
  geom_col(show.legend = FALSE) +
  geom_text(aes(label = scales::comma(total_hours)), vjust = -0.5, size = 3.5) +
  scale_fill_manual(values = c("Stranger Things" = "#FF0000", "Other" = "#1f77b4")) +
  scale_y_continuous(labels = scales::comma) +
  labs(
    title = "Top 10 Most-Watched English-Language TV Shows on Netflix",
    x = "TV Show",
    y = "Total Viewing Hours"
  ) +
  theme_minimal(base_size = 14) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```


## Netflix India Rapid Growth Thanks to Recent Successes of Hindi-Language Programs
**New York, NY — October 3, 2025**
```{r}
library(dplyr)
library(ggplot2)

hindi_programs <- COUNTRY_TOP_10 |>
  filter(country_name == "India") |>
  group_by(week) |>
  summarise(
    total_cumulative_weeks = sum(cumulative_weeks_in_top_10, na.rm = TRUE),
    .groups = "drop"
  ) |>
  arrange(week) |>
  mutate(
    ma_4week = as.numeric(stats::filter(total_cumulative_weeks, rep(1/4, 4), sides = 1))  # 4-week moving average
  )

# Plot cumulative weeks with moving average
ggplot(hindi_programs, aes(x = week)) +
  geom_line(aes(y = total_cumulative_weeks), color = "darkblue", size = 1.2) +
  geom_line(aes(y = ma_4week), color = "red", size = 1.2) +
  labs(
    title = "Cumulative Netflix Engagement in India",
    subtitle = "Total Weeks in Top 10 (with 4-week Moving Average)",
    x = "Week",
    y = "Total Cumulative Weeks"
  ) +
  theme_minimal()


```
## Press Release 3: Open Topic


